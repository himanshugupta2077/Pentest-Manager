{
    "Test case title": "JWT Token Discloses Sensitive Information",
    "Background Information": "JSON Web Tokens (JWTs) are often used for authentication and session management in web applications. While the token's signature ensures its integrity, the payload of a JWT is only Base64Url encoded, not encrypted. Including sensitive information in the JWT payload can lead to unauthorized disclosure of this data, as anyone can decode the token to view its contents. This is particularly risky if JWTs are transmitted over insecure channels or stored client-side.",
    "Impact": {
        "Overall": "Disclosure of sensitive information in JWT payloads can lead to unauthorized access to user data, potential identity theft, or other security breaches.",
        "Confidentiality": "Sensitive personal or system information embedded in the token could be exposed to anyone who intercepts or has access to the token.",
        "Integrity": "While the token's integrity is protected by its signature, exposed information could be used to compromise user accounts or system security.",
        "Availability": "No direct impact on availability, but widespread token misuse could potentially affect system performance.",
        "Sample": "A JWT containing a user's role and permissions could be decoded by an attacker, revealing sensitive details about the application's authorization structure."
    },
    "Remediation": [
        "Review all JWT implementations and remove any sensitive or unnecessary information from token payloads.",
        "Use opaque tokens or reference tokens instead of JWTs for sensitive data.",
        "If sensitive data must be included, use encrypted JWTs (JWE) instead of standard JWTs (JWS).",
        "Implement strict token validation on the server side, including signature verification and expiration checks.",
        "Use short expiration times for tokens and implement proper token rotation mechanisms.",
        "Store tokens securely on the client side, preferably in HTTPOnly cookies.",
        "Implement proper access controls and the principle of least privilege when handling token data.",
        "Use HTTPS to transmit tokens and prevent interception.",
        "Educate developers about JWT best practices and the risks of including sensitive data in tokens.",
        "Regularly audit JWT usage and content across the application."
    ],
    "Reference": {
        "OWASP: JSON Web Token Cheat Sheet": "https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html",
        "JWT.io: Introduction to JSON Web Tokens": "https://jwt.io/introduction/"
    }
}